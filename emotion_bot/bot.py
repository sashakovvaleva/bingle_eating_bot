# emotion_bot/bot.py
# Last updated: 2025-05-27 - Added detailed emotion descriptions

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from database import (
    init_db, insert_entry, get_user, save_user, close_db,
    get_last_cycle_day, save_cycle_day, get_pool
)
from dotenv import load_dotenv
import os
import logging
import sys
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found in environment variables")
    sys.exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class DiaryForm(StatesGroup):
    name = State()
    gender = State()
    hunger_before = State()
    satiety_after = State()
    emotion = State()
    sleep_hours = State()
    location = State()
    company = State()
    phone = State()
    cycle_day = State()
    binge_eating = State()

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    logger.info(f"Start command received from user {message.from_user.id}")
    user = await get_user(message.from_user.id)
    if user:
        name, _ = user
        await message.answer(
            f"–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name}!\n\n"
            "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏ üëá",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")]],
                resize_keyboard=True
            )
        )
    else:
        await state.set_state(DiaryForm.name)
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∏ —ç–º–æ—Ü–∏–π. –ü–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, —á—Ç–æ –∏ –∫–∞–∫ —Ç—ã –µ—à—å, "
            "–∞ —Ç–∞–∫–∂–µ –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–¥–æ—Ä–æ–≤—å–µ –≤ —Ü–µ–ª–æ–º.\n\n"
            "üìå –í–æ—Ç –∫–∞–∫ –º—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ:\n"
            "1Ô∏è‚É£ –¢—ã –±—É–¥–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ (–º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è).\n"
            "2Ô∏è‚É£ –Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–∞–∫–æ–≤ –±—ã–ª –≥–æ–ª–æ–¥ –¥–æ –µ–¥—ã, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –Ω–∞—Å—ã—Ç–∏–ª—Å—è(–ª–∞—Å—å), "
            "–≥–¥–µ —Ç—ã –µ–ª(–∞), —Å –∫–µ–º, –∫–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞) –∏ —Ç.–¥.\n"
            "3Ô∏è‚É£ –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–º–µ—á–∞—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É —ç–º–æ—Ü–∏—è–º–∏, –ø–∏—Ç–∞–Ω–∏–µ–º –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º, "
            "–∞ —Ç–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–µ—Ä–µ–µ–¥–∞–Ω–∏—è –∏–ª–∏ –ø–∏—â–µ–≤—ã–µ —Å—Ä—ã–≤—ã.\n\n"
            "‚ú® –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n\n"
            "üì• –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üëá"
        )

@dp.message(lambda message: message.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")
async def meal_button(message: types.Message, state: FSMContext):
    await meal(message, state)

@dp.message(DiaryForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=kb)
    await state.set_state(DiaryForm.gender)

@dp.message(DiaryForm.gender)
async def gender(message: types.Message, state: FSMContext):
    gender = message.text.lower()
    data = await state.get_data()
    await save_user(message.from_user.id, data["name"], gender)
    await state.update_data(gender=gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=str(i)) for i in range(1, 6)],
            [KeyboardButton(text=str(i)) for i in range(6, 11)]
        ],
        resize_keyboard=True
    )
    await message.answer(f"{data['name']}, –æ—Ç 1 –¥–æ 10, –∫–∞–∫–æ–π –±—ã–ª –≥–æ–ª–æ–¥ –ø–µ—Ä–µ–¥ –µ–¥–æ–π?", reply_markup=kb)
    await state.set_state(DiaryForm.hunger_before)

@dp.message(Command("meal"))
async def meal(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(DiaryForm.name)
        return
    name, gender = user
    await state.update_data(gender=gender)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=str(i)) for i in range(1, 6)],
            [KeyboardButton(text=str(i)) for i in range(6, 11)]
        ],
        resize_keyboard=True
    )
    await message.answer(f"{name}, –æ—Ç 1 –¥–æ 10, –∫–∞–∫–æ–π –±—ã–ª –≥–æ–ª–æ–¥ –ø–µ—Ä–µ–¥ –µ–¥–æ–π?", reply_markup=kb)
    await state.set_state(DiaryForm.hunger_before)

@dp.message(DiaryForm.hunger_before)
async def hunger_before(message: types.Message, state: FSMContext):
    await state.update_data(hunger_before=int(message.text))
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=str(i)) for i in range(1, 6)],
            [KeyboardButton(text=str(i)) for i in range(6, 11)]
        ],
        resize_keyboard=True
    )
    await message.answer("–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —Å—ã—Ç–æ—Å—Ç–∏ –ø–æ—Å–ª–µ?", reply_markup=kb)
    await state.set_state(DiaryForm.satiety_after)

@dp.message(DiaryForm.satiety_after)
async def satiety_after(message: types.Message, state: FSMContext):
    await state.update_data(satiety_after=int(message.text))
    emotions = [
        "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ / –Ω–∏–∫–∞–∫–∏—Ö —è—Ä–∫–∏—Ö —ç–º–æ—Ü–∏–π",
        "üòä –†–∞–¥–æ—Å—Ç—å / —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ / —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ",
        "üò¢ –ì—Ä—É—Å—Ç—å / —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ / –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ",
        "üò† –ó–ª–æ—Å—Ç—å / —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ / –æ–±–∏–¥–∞",
        "üò∞ –¢—Ä–µ–≤–æ–≥–∞ / –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ / –ø–∞–Ω–∏–∫–∞",
        "üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å / –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏–µ / –≤—è–ª–æ—Å—Ç—å",
        "üòû –°—Ç—ã–¥ / –≤–∏–Ω–∞ / —Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∞",
        "ü§Ø –°—Ç—Ä–µ—Å—Å / –¥–∞–≤–ª–µ–Ω–∏–µ / –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞",
        "ü•± –°–∫—É–∫–∞ / –∞–ø–∞—Ç–∏—è / –±–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ",
        "üòç –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ / –≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ / –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"
    ]
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=emotion)] for emotion in emotions],
        resize_keyboard=True
    )
    await message.answer("–ö–∞–∫—É—é —ç–º–æ—Ü–∏—é —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª(–∞)? –í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:", reply_markup=kb)
    await state.set_state(DiaryForm.emotion)

@dp.message(DiaryForm.emotion)
async def emotion(message: types.Message, state: FSMContext):
    await state.update_data(emotion=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=str(i)) for i in range(1, 7)],
            [KeyboardButton(text=str(i)) for i in range(7, 13)]
        ],
        resize_keyboard=True
    )
    await message.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Å–ø–∞–ª(–∞)?", reply_markup=kb)
    await state.set_state(DiaryForm.sleep_hours)

@dp.message(DiaryForm.sleep_hours)
async def sleep_hours(message: types.Message, state: FSMContext):
    await state.update_data(sleep_hours=float(message.text))
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –î–æ–º–∞"), KeyboardButton(text="üíº –†–∞–±–æ—Ç–∞/–£—á–µ–±–∞")],
            [KeyboardButton(text="üçΩÔ∏è –ö–∞—Ñ–µ/–†–µ—Å—Ç–æ—Ä–∞–Ω"), KeyboardButton(text="üö∂ –ù–∞ —Ö–æ–¥—É")],
            [KeyboardButton(text="üöó –í –º–∞—à–∏–Ω–µ"), KeyboardButton(text="üè¢ –í –≥–æ—Å—Ç—è—Ö")],
            [KeyboardButton(text="üå≥ –ù–∞ –ø—Ä–∏—Ä–æ–¥–µ"), KeyboardButton(text="üì± –î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ì–¥–µ —Ç—ã –µ–ª(–∞)? –í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=kb)
    await state.set_state(DiaryForm.location)

@dp.message(DiaryForm.location)
async def location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–æ–¥–∏–Ω/–æ–¥–Ω–∞"), KeyboardButton(text="—Å –∫–µ–º-—Ç–æ")]],
        resize_keyboard=True
    )
    await message.answer("–¢—ã –µ–ª(–∞) –æ–¥–∏–Ω/–æ–¥–Ω–∞ –∏–ª–∏ —Å –∫–µ–º-—Ç–æ?", reply_markup=kb)
    await state.set_state(DiaryForm.company)

@dp.message(DiaryForm.company)
async def company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="—Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º"), KeyboardButton(text="–±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer("–¢—ã –µ–ª(–∞) —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∏–ª–∏ –±–µ–∑?", reply_markup=kb)
    await state.set_state(DiaryForm.phone)

@dp.message(DiaryForm.phone)
async def phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    if data["gender"] == "–∂–µ–Ω—Å–∫–∏–π":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤–≤–µ–¥–µ–Ω –¥–µ–Ω—å —Ü–∏–∫–ª–∞ —Å–µ–≥–æ–¥–Ω—è
        cycle_day = await get_last_cycle_day(message.from_user.id)
        if cycle_day is not None:
            # –ï—Å–ª–∏ –¥–µ–Ω—å —Ü–∏–∫–ª–∞ —É–∂–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω —Å–µ–≥–æ–¥–Ω—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            await state.update_data(cycle_day=cycle_day)
            await ask_binge(message, state)
        else:
            # –ï—Å–ª–∏ –¥–µ–Ω—å —Ü–∏–∫–ª–∞ –µ—â–µ –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
            await message.answer(
                "–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ü–∏–∫–ª–∞?\n\n"
                "üìù –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 40\n"
                "(–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Ç–≤–æ–µ–≥–æ —Ü–∏–∫–ª–∞ —ç—Ç–∞ —Ü–∏—Ñ—Ä–∞ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è)\n\n"
                "‚Ä¢ 1-5 –¥–µ–Ω—å: –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è\n"
                "‚Ä¢ 6-14 –¥–µ–Ω—å: —Ñ–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞\n"
                "‚Ä¢ 15-28 –¥–µ–Ω—å: –ª—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞\n"
                "‚Ä¢ 29-40 –¥–µ–Ω—å: –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.set_state(DiaryForm.cycle_day)
    else:
        await ask_binge(message, state)

@dp.message(DiaryForm.cycle_day)
async def cycle_day(message: types.Message, state: FSMContext):
    cycle_day = int(message.text)
    await state.update_data(cycle_day=cycle_day)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–Ω—å —Ü–∏–∫–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    await save_cycle_day(message.from_user.id, cycle_day)
    await ask_binge(message, state)

async def ask_binge(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ù–µ—Ç, –æ–±—ã—á–Ω—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏"), KeyboardButton(text="‚ö†Ô∏è –õ—ë–≥–∫–æ–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ")],
            [KeyboardButton(text="‚ùó –°–∏–ª—å–Ω–æ–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ"), KeyboardButton(text="üî• –°—Ä—ã–≤/–∫–æ–º–ø—É–ª—å—Å–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ")],
            [KeyboardButton(text="ü§î –ù–µ —É–≤–µ—Ä–µ–Ω(–∞)"), KeyboardButton(text="üí≠ –•–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å –¥–µ—Ç–∞–ª–∏")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —ç—Ç–æ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏?\n\n"
        "‚Ä¢ –û–±—ã—á–Ω—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏ ‚Äî —Ç—ã —Å—ä–µ–ª(–∞) —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª(–∞)\n"
        "‚Ä¢ –õ—ë–≥–∫–æ–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ ‚Äî —Å—ä–µ–ª(–∞) –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ, –Ω–æ –±–µ–∑ —Å–∏–ª—å–Ω–æ–≥–æ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–∞\n"
        "‚Ä¢ –°–∏–ª—å–Ω–æ–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ ‚Äî —Å—ä–µ–ª(–∞) –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ, –µ—Å—Ç—å –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç\n"
        "‚Ä¢ –°—Ä—ã–≤ ‚Äî –ø–æ—Ç–µ—Ä—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –µ–¥—ã\n"
        "‚Ä¢ –ù–µ —É–≤–µ—Ä–µ–Ω(–∞) ‚Äî —Å–ª–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å\n"
        "‚Ä¢ –•–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å –¥–µ—Ç–∞–ª–∏ ‚Äî –µ—Å—Ç—å —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å",
        reply_markup=kb
    )
    await state.set_state(DiaryForm.binge_eating)

@dp.message(DiaryForm.binge_eating)
async def binge_eating(message: types.Message, state: FSMContext):
    await state.update_data(binge_eating=message.text)
    data = await state.get_data()
    await insert_entry(message.from_user.id, data)
    user = await get_user(message.from_user.id)
    name = user[0] if user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –í—Å—ë –∑–∞–ø–∏—Å–∞–Ω–æ üôå", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

async def send_daily_reminder():
    """Send daily reminder to all users"""
    logger.info("Sending daily reminders...")
    try:
        pool = await get_pool()
        async with pool.acquire() as conn:
            # Get all unique user IDs
            users = await conn.fetch("SELECT DISTINCT id FROM users")
            logger.info(f"Found {len(users)} users to send reminders")
            for user in users:
                try:
                    await bot.send_message(
                        user['id'],
                        "–ù–µ–±–æ–ª—å—à–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üåø\n\n"
                        "–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è –∑–∞–ø–∏—Å–∞—Ç—å, –∫–∞–∫ —Ç—ã —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è –æ—â—É—â–∞–µ—à—å ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –æ–±—â–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É. –í—Å—ë –ø–æ –∂–µ–ª–∞–Ω–∏—é, –Ω–∏–∫–∞–∫–æ–π —Å–ø–µ—à–∫–∏ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.\n\n"
                        "–¢–≤–æ—ë —É—á–∞—Å—Ç–∏–µ –¥–ª—è –Ω–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ. –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å ‚Äî —á–∞—Å—Ç—å —á–µ–≥–æ-—Ç–æ –±–æ–ª—å—à–µ–≥–æ. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —É–¥–µ–ª—è–µ—à—å –≤—Ä–µ–º—è –∏ –¥–µ–ª–∏—à—å—Å—è —á—É–≤—Å—Ç–≤–∞–º–∏.",
                        reply_markup=ReplyKeyboardMarkup(
                            keyboard=[[KeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")]],
                            resize_keyboard=True
                        )
                    )
                    logger.info(f"Reminder sent to user {user['id']}")
                except Exception as e:
                    logger.error(f"Failed to send reminder to user {user['id']}: {e}")
    except Exception as e:
        logger.error(f"Error in daily reminder: {e}")

async def main():
    try:
        logger.info("Starting bot...")
        await init_db()
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error in bot: {e}")
    finally:
        await close_db()
        logger.info("Bot stopped.")

if __name__ == "__main__":
    asyncio.run(main())
